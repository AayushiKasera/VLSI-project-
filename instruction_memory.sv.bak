module instruction_memory(
input logic clk, rst,
input logic[2:0] Asw, //address input by swicthes
input logic[3:0] beq_sw, //condition switches for BEQ, these 4 switches are used to input the last digit of your board number
output logic[31:0] RD //output data, instrunction
);

reg[31:0] ins_regs [4:0];

//write sone logic here to achieve BEQ

/*
Tips: you can make an internal logic address internal_Addr which is the actual address
you use to output instruction, and write some MUXs here to decide which address you wil)
assign to internal_addr, address from switches A.sw or address from im field of BEQ instruction.
*/

localparam boardLastNumber = 2;
localparam imm = 1;

reg [2:0] internal_Addr;

//If our switches match board number go to 1 else move to next instrunction
assign internal_Addr = (Asw == 5)? (beq_sw == boardLastNumber) ? imm:Asw+1 : Asw; 

always @(posedge clk or negedge rst)
begin
	if (!rst) begin
		//I-type instrunction = op[5:0] + rs[4:0] + rt [4:0] + imm[15:0]
		//R-type instrunction = op[5:0] + rs[4:0] + rt [4:0] + rd[4:0] + func[10:0]
		// set Inst[0] as 0, so when A = 0, the instruction does nothing
		ins_regs[0] <= 32'b0;
		//1st Inst : LW load data_reg[5] to rf_reg[1], rs = 2, rt = 1, imm = 3 (result: rf_reg[1] = 5) 
		ins_regs[1] <= 32'b010101_00010_00001_0000000000000011;
		//2st Inst : SW store rf_reg[1] to data_reg[9], rs = 8, rt = 1, imm = 1 (result: data_reg[9] = 5) 
		ins_regs[2] <= 32'b010100_01000_00001_0000000000000001;	
		//3rd Inst : ADD rf_reg[3] and rf_reg[4] to rf_reg[1] (result : rf_reg[1] = 3 + 4 = 7)
		ins_regs[3] <= 32'b100100_00011_00100_00001_00000000000;
		//4th Inst : SUB rf_reg[10] and rf_reg[8] to rf_reg[1] (result : rf_reg[1] = 10 - 8 = 2)
		ins_regs[4] <= 32'b100100_00101_00010_00001_00000000000;
		//5th Inst : set traget instruction to 1st instruction, set op=rs=rt=0, imm = 1 (results: rf_reg[1] = 5)
		ins_regs[5] <= 32'b000000_00000_00000_0000000000000001;
	end
	
	else begin
		case (internal_Addr)
		0 : RD <= ins_regs[0];
		1 : RD <= ins_regs[1];
		2 : RD <= ins_regs[2];
		3 : RD <= ins_regs[3];
		4 : RD <= ins_regs[4];
		5 : RD <= ins_regs[5];
		
		default : RD <= ins_regs[0];
		endcase
	end

end

endmodule
 